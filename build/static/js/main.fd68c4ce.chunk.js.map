{"version":3,"sources":["components/header/header.js","components/imageCard/imageCard.js","App.js","serviceWorker.js","index.js"],"names":["style","header","background","h1","textAlign","color","div","fontSize","textDecoration","margin","lineHeight","Header","props","react_default","a","createElement","className","count","high","imageCard","card","width","height","boxShadow","border","display","justifyContent","image","onClick","handleIamgeClick","id","alt","name","src","imageArr","App","state","imgList","clicked","console","log","_this","includes","setState","shuffleCards","push","alert","shuffledImgList","sort","Math","random","_this2","this","flexFlow","padding","alignContent","map","imageCard_imageCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAEMA,EAAQ,CACZC,OAAQ,CACNC,WAAY,UAGdC,GAAI,CACFC,UAAW,OACXC,MAAO,SAETC,IAAK,CACHD,MAAO,QACPE,SAAU,SACVC,eAAgB,OAChBC,OAAQ,MACRC,WAAY,IAcDC,MATf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BhB,MAAOA,EAAMC,QACtDY,EAAAC,EAAAC,cAAA,MAAIf,MAAOA,EAAMG,IAAjB,eACAU,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAchB,MAAOA,EAAMM,KAAxC,kBAA6DM,EAAMK,MAAnE,mBAA0FL,EAAMM,KAAhG,OCOSC,MA5Bf,SAAmBP,GAEjB,IAAMZ,EAAQ,CACZoB,KAAM,CACJC,MAAO,IACPC,OAAQ,IACRb,OAAQ,YACRc,UAAW,iCACXC,OAAQ,kBACRC,QAAS,OACTC,eAAgB,UAElBC,MAAO,CACLN,MAAO,OACPC,OAAQ,SAIZ,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBhB,MAAOA,EAAMoB,MAC3CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfY,QAAS,kBAAMhB,EAAMiB,iBAAiBjB,EAAMkB,MAC5CjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKnB,EAAMoB,KAAMC,IAAKrB,EAAMe,MAAO3B,MAAOA,EAAM2B,WCtBrDO,EAAW,CACf,CACEJ,GAAI,EACJH,MAAO,mBACPK,KAAM,OAER,CACEF,GAAI,EACJH,MAAO,qBACPK,KAAM,SAER,CACEF,GAAI,EACJH,MAAO,sBACPK,KAAM,WAER,CACEF,GAAI,EACJH,MAAO,qBACPK,KAAM,SAER,CACEF,GAAI,EACJH,MAAO,qBACPK,KAAM,SAER,CACEF,GAAI,EACJH,MAAO,mBACPK,KAAM,OAER,CACEF,GAAI,EACJH,MAAO,qBACPK,KAAM,WAER,CACEF,GAAI,EACJH,MAAO,oBACPK,KAAM,QAER,CACEF,GAAI,EACJH,MAAO,qBACPK,KAAM,UAmEKG,6MA7DbC,MAAQ,CACNnB,MAAO,EACPoB,QAASH,EACThB,KAAM,EACNoB,QAAQ,MAGVT,iBAAmB,SAACC,GAYlB,GAXAS,QAAQC,IAAIC,EAAKL,MAAME,SAEnBG,EAAKL,MAAME,QAAQI,SAASZ,IAC9BW,EAAKE,SAAS,CAAE1B,MAAO,IACvBwB,EAAKG,eACLH,EAAKE,SAAS,CAACL,QAAS,OAExBG,EAAKE,SAAS,CAAE1B,MAAOwB,EAAKL,MAAMnB,MAAQ,IAC1CwB,EAAKG,eACLH,EAAKL,MAAME,QAAQO,KAAKf,IAEF,IAArBW,EAAKL,MAAMnB,MACZ,OAAO6B,MAAM,eAIjBF,aAAe,WACb,IAAMG,EAAkBN,EAAKL,MAAMC,QAAQW,KAAK,iBAAM,GAAMC,KAAKC,WACjET,EAAKE,SAAS,CACZN,QAASU,6EAIJ,IAAAI,EAAAC,KAWP,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACd,EAAD,CAAQgB,MAAOmC,KAAKhB,MAAMnB,MAAOC,KAAMkC,KAAKhB,MAAMlB,OAClDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMhB,MAbhB,CACPsB,OAAQ,OACRG,QAAS,OACT4B,SAAU,WACVC,QAAS,cACT5B,eAAgB,eAChB6B,aAAc,eASVH,KAAKhB,MAAMC,QAAQmB,IAAI,SAAA7B,GACrB,OACEd,EAAAC,EAAAC,cAAC0C,EAAD,CAAW3B,GAAIH,EAAMG,GAAIH,MAAOA,EAAMA,MAAOE,iBAAkBsB,EAAKtB,iBAAkB6B,IAAK/B,EAAMG,GAAIE,KAAML,EAAMK,KAAMM,QAAQ,sBApD7HqB,IAAMC,WCxCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd68c4ce.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst style = {\r\n  header: {\r\n    background: \"purple\",\r\n\r\n  },\r\n  h1: {\r\n    textAlign: \"left\",\r\n    color: \"white\",\r\n  },\r\n  div: {\r\n    color: \"white\",\r\n    fontSize: \"1.3rem\",\r\n    textDecoration: \"none\",\r\n    margin: \"5px\",\r\n    lineHeight: 3,\r\n\r\n  }\r\n}\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"jumbotron jumbotron=fluid\" style={style.header}>\r\n      <h1 style={style.h1}>Clicky Game</h1>\r\n      <p className=\"float-right\" style={style.div}>Current Score: {props.count} || Goal Score: {props.high} </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\n\r\n\r\nfunction imageCard(props) {\r\n\r\n  const style = {\r\n    card: {\r\n      width: 200,\r\n      height: 150,\r\n      margin: \"15px 45px\",\r\n      boxShadow: \"0 3px 6px #999, 0 3px 6px #999\",\r\n      border: \"3px solid white\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\"\r\n    },\r\n    image: {\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n    }\r\n    }\r\n\r\n  return (\r\n    <div className=\"col-4 col-md-2\" style={style.card}>\r\n      <div className=\"img-container\" \r\n      onClick={() => props.handleIamgeClick(props.id)} >\r\n      <img alt={props.name} src={props.image} style={style.image} />\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default imageCard;","import React from 'react';\nimport Header from \"./components/header/header\"\nimport ImageCard from './components/imageCard/imageCard';\n\nconst imageArr = [\n  {\n    id: 1,\n    image: \"./images/ryu.jpg\",\n    name: \"Ryu\"\n  },\n  {\n    id: 2,\n    image: \"./images/akuma.jpg\",\n    name: \"Akuma\"\n  },\n  {\n    id: 3,\n    image: \"./images/chunli.jpg\",\n    name: \"Chun Li\"\n  },\n  {\n    id: 4,\n    image: \"./images/guile.png\",\n    name: \"Guile\"\n  },\n  {\n    id: 5,\n    image: \"./images/Cammy.jpg\",\n    name: \"Cammy\"\n  },\n  {\n    id: 6,\n    image: \"./images/ken.png\",\n    name: \"Ken\"\n  },\n  {\n    id: 7,\n    image: \"./images/bison.jpg\",\n    name: \"M Bison\"\n  },\n  {\n    id: 8,\n    image: \"./images/vega.jpg\",\n    name: \"Vega\"\n  },\n  {\n    id: 9,\n    image: \"./images/sagat.jpg\",\n    name: \"Sagat\"\n  }\n]\n\nclass App extends React.Component {\n\n  state = {\n    count: 0,\n    imgList: imageArr,\n    high: 9,\n    clicked:[]\n  }\n\n  handleIamgeClick = (id) => {\n    console.log(this.state.clicked)\n    \n    if (this.state.clicked.includes(id)) {\n      this.setState({ count: 0 });\n      this.shuffleCards();\n      this.setState({clicked: []})\n    } else {\n      this.setState({ count: this.state.count + 1 });\n      this.shuffleCards();\n      this.state.clicked.push(id)\n    }\n    if(this.state.count === 9){\n      return alert(\"You Win!\")\n    }\n  };\n\n  shuffleCards = () => {\n    const shuffledImgList = this.state.imgList.sort(() => 0.5 - Math.random());\n    this.setState({\n      imgList: shuffledImgList\n    });\n  };\n\n  render() {\n    const style = {\n      wrapper: {\n        height: \"100%\",\n        display: \"flex\",\n        flexFlow: \"row wrap\",\n        padding: \"25px 0 50px\",\n        justifyContent: \"space-around\",\n        alignContent: \"flex-start\"\n      }\n    }\n    return (\n      <div>\n        <Header count={this.state.count} high={this.state.high} />\n        <div className=\"container\">\n          <div className=\"row\" style={style.wrapper}>\n          {\n            this.state.imgList.map(image => {\n              return (\n                <ImageCard id={image.id} image={image.image} handleIamgeClick={this.handleIamgeClick} key={image.id} name={image.name} clicked=\"false\" />\n              )\n            })\n          }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}